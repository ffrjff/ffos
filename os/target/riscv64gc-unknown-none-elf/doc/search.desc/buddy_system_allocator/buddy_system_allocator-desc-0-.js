searchState.loadedDescShard("buddy_system_allocator", 0, "A frame allocator that uses buddy system, requiring a …\nA heap that uses buddy system\nA locked version of <code>FrameAllocator</code>\nA locked version of <code>Heap</code>\nA locked version of <code>Heap</code> with rescue before oom\nAdd a range of frame number [start, end) to the allocator\nAdd a range of memory [start, end) to the heap\nAlloc a range of frames from the allocator, return the …\nAlloc a range of memory from the heap satifying <code>layout</code> …\nDealloc a range of frames [frame, frame+count) from the …\nDealloc a range of memory from the heap\nCreate an empty heap\nCreates an empty heap\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a range of memory [start, end) to the heap\nAdd a range of frame to the allocator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvide the intrusive LinkedList\nCreate an empty frame allocator\nCreates an empty heap\nCreate an empty heap\nCreates an empty heap\nCreates an empty heap\nReturn the number of bytes that are actually allocated\nReturn the number of bytes that user requests\nReturn the total number of bytes in the heap\nAn iterator over the linked list\nA mutable iterator over the linked list\nAn intrusive linked list\nRepresent a mutable node in <code>LinkedList</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the list is empty\nReturn an iterator over the items in the list\nReturn an mutable iterator over the items in the list\nCreate a new LinkedList\nRemove the node from the list\nTry to remove the first item in the list\nPush <code>item</code> to the front of the list\nReturns the pointed address")